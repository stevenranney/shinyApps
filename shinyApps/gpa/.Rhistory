source('~/.active-rstudio-document');
stomach <- read.table("C:\\Documents and Settings\\steven.ranney\\Desktop\\Manuscripts\\Wr and Stomach Contents\\stomach.txt", header=T)
stomach <- read.table("C:\\Users\\Steven Harris Ranney\\Desktop\\Manuscripts\\Wr and Stomach Contents\\stomach.txt", header=T)
attach(stomach)
names(stomach)
smb <- stomach[Species=="SMB",]
attach(smb)
detach(stomach)
Wr <- (Weight/(10^(-5.329+3.2*(log10(Length)))))*100
smb <- cbind(smb, Wr)
WrE <- ((Weight-St.weight)/(10^(-5.329+3.2*(log10(Length)))))*100
smb <- cbind(smb, WrE)
psd <- with(smb,
ifelse((Length>=180)&(Length<280), "1",
ifelse((Length>=280)&(Length<350), "2",
ifelse((Length>=350)&(Length<430), "3",
ifelse((Length>=430)&(Length<510), "4",
ifelse(Length>=510, ">T",
"0"))))))
smb <- cbind(psd, smb)
vol <- 1.05*St.weight
smb <- cbind(smb, vol)
### Max volume and length by length category and population
smbo <- smb[order(smb$Lake, smb$psd, smb$vol), ]
smb.vol.length <- write.table(aggregate(smbo[c("Length", "vol")], smbo[c("Lake", "psd")], tail, 1), file="smb.vol.length.txt")
smb.vol.length <- read.table("smb.vol.length.txt")
#max.vol.q <- nlrq(vol~a*Length^b, data=smb.vol.length, start=list(a=0.00000005, b=3.0), tau=0.75, trace=TRUE)
max.vol.nls <- nls(vol~a*Length^b, data=smb.vol.length, start=list(a=0.00000005, b=3.0), trace=TRUE)
with(smb.vol.length,
plot(vol~Length, pch=19, ylab="Maximum stomach contents (ml)", xlab="Total length (mm)",
ylim=c(0,80), xlim=c(100, 500),yaxs="i", xaxs="i", las=1, bty="n"))
mod <- seq(min(Length), max(Length), 0.01)
#  lines(mod, predict(max.vol.q, list(Length = mod)))
lines(mod, predict(max.vol.nls, list(Length = mod)), lty=2)
#    abline(v=180, lty=2)
#    abline(v=280, lty=2)
#    abline(v=350, lty=2)
#    abline(v=430, lty=2)
#    text(140, 75, "substock")
#    text(230, 75, "S-Q")
#    text(315, 75, "Q-P")
#    text(390, 75, "P-M")
#    text(470, 75, "M-T")
R2(smb.vol.length$Length, smb.vol.length$vol, max.vol.nls)
#Another method to calculate Coeffecient of determination
#SST <- sum((smb.vol.length$vol-mean(predict(max.vol)))^2)
#SSE <- sum((smb.vol.length$vol-(predict(max.vol)))^2)
#1-(SSE/SST)
#Calculate maximum stomach weight of individual fish
max.st.weight <- (2.727e-06*Length^2.696)/1.05
smb <- cbind(smb, max.st.weight)
#Calculate Wr.max of individual fish (i.e., total weight minus stomach weight
#plus estimated maximum stomach weight)
Wr.max <- ((Weight-St.weight+max.st.weight)/(10^(-5.329+3.2*(log10(Length))))*100)
smb <- cbind(smb, Wr.max)
#Percent difference between WrS and Wr
((tapply(WrE, psd, median)-tapply(Wr, psd, median))/tapply(Wr, psd, median))*100
#Function to determine sample size
values=function(x)
{
return(sum(!is.na(x)))
}
tapply(Wr, psd, values)
shapiro.test(Wr)
with(smb[psd=="0",],
wilcox.test(Wr, y=WrE))
with(smb[psd=="1",],
wilcox.test(Wr, y=WrE))
with(smb[psd=="2",],
wilcox.test(Wr, y=WrE))
with(smb[psd=="3",],
wilcox.test(Wr, y=WrE))
with(smb[psd=="4",],
wilcox.test(Wr, y=WrE))
#Comparing WrE to WrMAX
with(smb[psd=="0",],
wilcox.test(WrE, y=Wr.max))
with(smb[psd=="1",],
wilcox.test(WrE, y=Wr.max))
with(smb[psd=="2",],
wilcox.test(WrE, y=Wr.max))
with(smb[psd=="3",],
wilcox.test(WrE, y=Wr.max))
with(smb[psd=="4",],
wilcox.test(WrE, y=Wr.max))
#Percent difference between Wr and Wr.max
((tapply(WrE, psd, median)-tapply(Wr.max, psd, median))/tapply(Wr.max, psd, median))*100
#Comparing WrS to WrMAX
with(smb[psd=="0",],
wilcox.test(Wr, y=Wr.max))
with(smb[psd=="1",],
wilcox.test(Wr, y=Wr.max))
with(smb[psd=="2",],
wilcox.test(Wr, y=Wr.max))
with(smb[psd=="3",],
wilcox.test(Wr, y=Wr.max))
with(smb[psd=="4",],
wilcox.test(Wr, y=Wr.max))
#Percent difference between Wr and Wr.max
((tapply(Wr, psd, median)-tapply(Wr.max, psd, median))/tapply(Wr.max, psd, median))*100
###############################################################################################
#Barplot of the whole shebang!
#Adjusted for MEDIANS and SE, not MEAN and 95% CI.
z.smb <- matrix(c(tapply(Wr, psd, median),
tapply(WrE, psd, median),
tapply(Wr.max, psd, median)),
nrow=3, ncol=5, byrow=T, dimnames=list(c("Wr", "WrE", "WrMAX"), c("0","1","2","3","4")))
barplot(z.smb, beside=T, space=c(0,1), ylim=c(85,115), xlab="Length Category", axis.lty=1, ylab=expression(paste("Relative weight   ", (italic(W[r])))),
legend=F, xpd=F, names.arg=c("Substock","S-Q","Q-P","P-M","M-T"))#, density=c(0,0,6), angle=c(0,0,45), col="black")
abline(h=85)
#  legend(12,110, legend=c(expression(italic(W[r]), italic(W[r])[E], italic(W[r])[MAX])), fill=gray.colors(3), bty="n", cex=2)
#Generate matrices of upper and lower CI bars
z.ci.u <- matrix(c(tapply(Wr, psd, median)+((tapply(Wr, psd, sd)/sqrt(tapply(Wr, psd, values)))),
tapply(WrE, psd, median)+((tapply(WrE, psd, sd)/sqrt(tapply(WrE, psd, values)))),
tapply(Wr.max, psd, median)+((tapply(Wr.max, psd, sd)/sqrt(tapply(Wr.max, psd, values))))),
nrow=3, ncol=5, byrow=T, dimnames=list(c("Wr", "WrE", "WrMAX"), c("0","1","2","3","4"))
)
z.ci.l <- matrix(c(tapply(Wr, psd, median)-((tapply(Wr, psd, sd)/sqrt(tapply(Wr, psd, values)))),
tapply(WrE, psd, median)-((tapply(WrE, psd, sd)/sqrt(tapply(WrE, psd, values)))),
tapply(Wr.max, psd, median)-((tapply(Wr.max, psd, sd)/sqrt(tapply(Wr.max, psd, values))))),
nrow=3, ncol=5, byrow=T, dimnames=list(c("Wr", "WrE", "WrMAX"), c("0","1","2","3","4"))
)
#matrices of 25th and 75th percentiles
z.q.l.smb <- matrix(c(quantile(Wr[psd==0], 0.25, na.rm=T), quantile(Wr[psd==1], 0.25, na.rm=T), quantile(Wr[psd==2], 0.25, na.rm=T), quantile(Wr[psd==3], 0.25, na.rm=T), quantile(Wr[psd==4], 0.25, na.rm=T),
quantile(WrE[psd==0], 0.25, na.rm=T), quantile(WrE[psd==1], 0.25, na.rm=T), quantile(WrE[psd==2], 0.25, na.rm=T), quantile(WrE[psd==3], 0.25, na.rm=T), quantile(WrE[psd==4], 0.25, na.rm=T),
quantile(Wr.max[psd==0], 0.25, na.rm=T), quantile(Wr.max[psd==1], 0.25, na.rm=T), quantile(Wr.max[psd==2], 0.25, na.rm=T), quantile(Wr.max[psd==3], 0.25, na.rm=T), quantile(Wr.max[psd==4], 0.25, na.rm=T)),
nrow=3, ncol=5, byrow=T, dimnames=list(c("Wr", "WrE", "WrMAX"), c("0","1","2","3","4"))
)
z.q.u.smb <- matrix(c(quantile(Wr[psd==0], 0.75, na.rm=T), quantile(Wr[psd==1], 0.75, na.rm=T), quantile(Wr[psd==2], 0.75, na.rm=T), quantile(Wr[psd==3], 0.75, na.rm=T), quantile(Wr[psd==4], 0.75, na.rm=T),
quantile(WrE[psd==0], 0.75, na.rm=T), quantile(WrE[psd==1], 0.75, na.rm=T), quantile(WrE[psd==2], 0.75, na.rm=T), quantile(WrE[psd==3], 0.75, na.rm=T), quantile(WrE[psd==4], 0.75, na.rm=T),
quantile(Wr.max[psd==0], 0.75, na.rm=T), quantile(Wr.max[psd==1], 0.75, na.rm=T), quantile(Wr.max[psd==2], 0.75, na.rm=T), quantile(Wr.max[psd==3], 0.75, na.rm=T), quantile(Wr.max[psd==4], 0.75, na.rm=T)),
nrow=3, ncol=5, byrow=T, dimnames=list(c("Wr", "WrE", "WrMAX"), c("0","1","2","3","4"))
)
errbar((c(1.5:3.5, 5.5:7.5, 9.5:11.5, 13.5:15.5, 17.5:19.5)),
z.smb,
z.q.u.smb,
z.q.l.smb,
add=T, pch=" ")
#detach(smb)
#rm(list=ls(all=TRUE))
#Least-squares regression on log10-transformed data
#smb.vol.length <- read.table("smb.vol.length.txt")
#mod.1 <- lm(log10(smb.vol.length$vol)~log10(smb.vol.length$Length))
#plot(log10(smb.vol.length$vol)~log10(smb.vol.length$Length))
#  abline(mod.1)
?r2
R2
R2
?R2
R2
R2
values
source('~/.active-rstudio-document');
source('~/.active-rstudio-document');
stomach <- read.table("C:Users\\Steven Harris Ranney\\Desktop\\Manuscripts\\Wr and Stomach Contents\\stomach.txt", header=T)
attach(stomach)
names(stomach)
wae <- stomach[Species=="WAE",]
attach(wae)
detach(stomach)
stomach <- read.table("C:\\Users\\Steven Harris Ranney\\Desktop\\Manuscripts\\Wr and Stomach Contents\\stomach.txt", header=T)
attach(stomach)
names(stomach)
wae <- stomach[Species=="WAE",]
attach(wae)
detach(stomach)
Wr <- (Weight/(10^(-5.453+3.18*(log10(Length)))))*100
wae <- cbind(wae, Wr)
WrE <- ((Weight-St.weight)/(10^(-5.453+3.18*(log10(Length)))))*100
wae <- cbind(wae, WrE)
psd <- with(wae,
ifelse((Length>=250)&(Length<380), "1",
ifelse((Length>=380)&(Length<510), "2",
ifelse((Length>=510)&(Length<630), "3",
ifelse((Length>=630)&(Length<760), "4",
ifelse(Length>=760, NA,
"0"))))))
wae <- cbind(psd, wae)
vol <- 1.05*St.weight
wae <- cbind(wae, vol)
### Max volume and length by length category and population
waeo <- wae[order(wae$Lake, wae$psd, wae$vol), ]
wae.vol.length <- write.table(aggregate(waeo[c("Length", "vol")], waeo[c("Lake", "psd")], tail, 1), file="wae.vol.length.txt")
wae.vol.length <- read.table("wae.vol.length.txt")
#max.vol.q <- nlrq(vol~a*Length^b, data=wae.vol.length, start=list(a=0.0000005, b=3.1), tau=0.75, trace=TRUE,
#    control=nls.control(maxiter=10000))
max.vol.nls <- nls(vol~a*Length^b, data=wae.vol.length, start=list(a=0.00000005, b=3.0), trace=TRUE,
control=nls.control(maxiter=10000))
with(wae.vol.length,
plot(vol~Length, pch=19, ylab="Maximum stomach contents (ml)", xlab="Total length (mm)",
ylim=c(0,200), xlim=c(200,700),yaxs="i", xaxs="i", las=1, bty="n"))
mod <- seq(min(Length), max(Length), 0.01)
#  lines(mod, predict(max.vol.q, list(Length = mod)))
lines(mod, predict(max.vol.nls, list(Length = mod)), lty=2)
#    abline(v=250, lty=2)
#    abline(v=380, lty=2)
#    abline(v=510, lty=2)
#    abline(v=630, lty=2)
#  legend(225, 190, legend=c(expression(paste(3^rd, " Quantile")), "Nonlinear Least Squares"), lty=c(1,2))
#  legend(225, 190, legend=c(expression(italic(Q[3])), "NLS"), lty=c(1,2))
text(300, 190, label="B", cex=2)
R2(wae.vol.length$Length, wae.vol.length$vol, max.vol.nls)
#Another method to calculate Coeffecient of determination
#SST <- sum((wae.vol.length$vol-mean(predict(max.vol)))^2)
#SSE <- sum((wae.vol.length$vol-(predict(max.vol)))^2)
#1-(SSE/SST)
#Calculate maximum stomach weight of individual fish
max.st.weight <- (2.200e-10*Length^4.121)/1.05
wae <- cbind(wae, max.st.weight)
#Calculate Wr.max of individual fish (i.e., total weight minus stomach weight
#plus estimated maximum stomach weight)
Wr.max <- ((Weight-St.weight+max.st.weight)/(10^(-5.453+3.18*(log10(Length))))*100)
wae <- cbind(wae, Wr.max)
#Percent difference between Wr and WrS
((tapply(WrE, psd, median)-tapply(Wr, psd, median))/tapply(Wr, psd, median))*100
#Function to determine sample size
#values=function(x)
#  {
#  return(sum(!is.na(x)))
#  }
tapply(Wr, psd, values)
shapiro.test(Wr)
with(wae[psd=="0",],
wilcox.test(Wr, y=WrE))
with(wae[psd=="1",],
wilcox.test(Wr, y=WrE))
with(wae[psd=="2",],
wilcox.test(Wr, y=WrE))
with(wae[psd=="3",],
wilcox.test(Wr, y=WrE))
with(wae[psd=="4",],
wilcox.test(Wr, y=WrE))
require(RODBC)
require(inlinedocs)
require(SWEAVE)
require(sweave)
install.packages("sweave")
install.packages("SWEAVE")
?tex
??tex
install.packages("shinyapps")
install.packages("shiny")
require(shiny)
require(Sdraw)
require(SDraw)
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
?qr
library(quantreg)
?rq
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
?legend
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
dataset <- reactive(function() {
wae[sample(nrow(wae), input$sampleSize, replace=TRUE), ]
})
lmMod <- reactive(function() {
lm(log10(dataset()$Weight)~log10(dataset()$Length))
})
dataset()
dataset()
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
wae <- read.table('data/WAE Clean.txt', header=T)
getwd()
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
nlsMod <- reactive(function() {
nls(dataset()$Weight~alpha*dataset()$Length^beta,
start=list(alpha=0.000001, beta=3.0), data=dataset())
})
nlsMod()
shinyServer(function(input, output) {
nlsMod <- reactive(function() {
nls(dataset()$Weight~alpha*dataset()$Length^beta,
start=list(alpha=0.000001, beta=3.0), data=dataset())
})
}) #Close shiny statement
nlsMod()
plot(nlsMod)
plot(nlsMod())
?reactive
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
shiny::runApp('C:/Users/Steven Harris Ranney/Desktop/shiny/waeDemo')
getwd()
library(sp)
library(rgdal)
library(rgeos)
library(maptools)
library(raster)
tulareCrops <- raster("C:/Users/Steven Harris Ranney/Dropbox/for Deb/tulareCounty/gis/cropscapeData2013/tulareCropReprj.tif",
layer = 1, values = TRUE)
tulareCrops <- raster("C:/Users/Steven Harris Ranney/Dropbox/for Deb/tulareCounty/gis/cropscape2013/tulareCropReprj.tif",
layer = 1, values = TRUE)
tulareCrops <- raster("C:/Users/Steven Harris Ranney/Dropbox/for Deb/tulareCounty/gis/cropscape2013/cropReprj.tif",
layer = 1, values = TRUE)
parcels <- readOGR("C:/Users/Steven Harris Ranney/Dropbox/for Deb/tulareCounty/gis/parcels/parcelsReprojectedCities",
"parcelsWithCity")
plot(parcels)
plot(tulareCrops)
head(parcels@data)
unique(parcels@data$cityName)
dmode <- function(x) {
den <- density(x, kernel=c("gaussian"))
( den$x[den$y==max(den$y)] )
}
x <- sample(1:10, 25, replace = T)
x
dmode(x)
Mode(x)
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = subset(x, !is.na(x))
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
Mode(x)
hist(x)
x <- sample(1:10, 1000, replace = T)
dmode(x)
hist(x)
Mode(x)
hist(x, breaks = 25)
density(x)
plot(density(x))
class(x)
Mode(x)
hist(x, breaks = 25)
ep <- extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T)
ep
ep <- lapply(ep, function(x) x[!is.na(x)]) # remove NA values
ep
( x <- round(unlist(lapply(ep, FUN=Mode)), digits=0) )
x
parcels@data[1]
parcels@data[1, ]
x
library(foreign)
cropData <- read.dbf("C:/Users/Steven Harris Ranney/Dropbox/for Deb/tulareCounty/gis/cropscape2013/CDL_2013_clip_20141031104238_444940507.tif.vat.dbf",
as.is = T)
cropData
ep
system.time(
ep <- extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T)
)
ep
class(ep)
system.time(
ep <- extract(tulareCrops, parcels[1:100,], fun = Mode, na.rm = T)
)
ep
nrow(parcels@data)
151973/100
1519*86
130634/60
2177/60
system.time(
ep <- as.data.frame(extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T))
)
class(ep)
ep
system.time(
ep <- as.data.frame(extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T))
names(ep) <- c("cropValue")
)
system.time(
ep <- as.data.frame(extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T))
names(ep) <- c("cropValue")
)
system.time(
ep <- as.data.frame(extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T))
names(ep) <- c("cropValue")
)
system.time(
ep <- as.data.frame(extract(tulareCrops, parcels[1:10,], fun = Mode, na.rm = T))
)
names(ep) <- c("cropValue")
ep
ep
head(cropData)\
head(cropData)
tmp <- merge(ep, cropData, by.x = "cropValue", by.y = "VALUE")
tmp
first10 <- parcels@data[1:10, ]
first10
class(first10)
first10 <- cbind(first10, ep)
first10
tmp <- merge(first10, cropData, by.x = "cropValue", by.y = "VALUE")
tmp
ep
368.15
36*.15
138618+138618+29830+1188
308254/1024
setwd("https://s3-us-west-2.amazonaws.com/gateway-environmental/testingR/tulareCropsParcels")
tulareCrops <- raster("https://s3-us-west-2.amazonaws.com/gateway-environmental/testingR/tulareCropsParcels/cropReprj.tif",
layer = 1, values = TRUE)
tulareCrops <- raster("http://s3-us-west-2.amazonaws.com/gateway-environmental/testingR/tulareCropsParcels/cropReprj.tif",
layer = 1, values = TRUE)
tulareCrops <- raster("https://s3-us-west-2.amazonaws.com/gateway-environmental/testingR/tulareCropsParcels/cropReprj.tif",
layer = 1, values = TRUE)
getwd()
"https://s3-us-west-2.amazonaws.com/gateway-environmental/testingR/tulareCropsParcels/cropReprj.tif"
shiny::runApp('GitHub/shinyApps/shinyApps/gpa')
shiny::runApp('GitHub/shinyApps/shinyApps/gpa')
shiny::runApp('GitHub/shinyApps/shinyApps/gpa')
shiny::runApp('GitHub/shinyApps/shinyApps/gpa')
shiny::runApp('GitHub/shinyApps/shinyApps/gpa')
shiny::runApp('GitHub/shinyApps/shinyApps/gpa')
shinyApps::showLogs()
shinyapps::showLogs()
setwd("~/GitHub/shinyApps/shinyApps/gpa")
shinyapps::showLogs()
shiny::runApp()
